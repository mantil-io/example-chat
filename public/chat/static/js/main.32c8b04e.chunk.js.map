{"version":3,"sources":["api/proto.ts","api/ws.ts","api/index.ts","api/requester.ts","api/subscriber.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MessageType","toProto","m","type","Subscribe","mp","subjects","length","forEach","s","toProtoSub","Unsubscribe","toProtoUnsub","Request","uri","inbox","payload","toProtoReq","Response","toProtoRsp","Publish","subject","toProtoPub","connect","url","ws","WebSocket","openGuard","Promise","resolve","readyState","OPEN","undefined","onopen","a","proto","send","addMessageEventListener","handler","addEventListener","e","protoMessage","lines","split","headerParts","slice","join","data","createApi","requester","requests","uuid","msg","JSON","stringify","rspWaiter","rsp","parse","callback","request","close","createRequester","subscriber","subs","subscribe","unsubscribe","createSubscriber","requestUri","method","Messages","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","scrollToBottom","className","map","message","user","differenceInCalendarDays","Date","createdAt","format","content","id","ref","Input","api","username","useState","setContent","onEnter","useCallback","key","inputRef","focus","value","onChange","target","onKeyDown","UserPrompt","setUsername","userInput","setUserInput","onKeyPress","App","setMessages","useMemo","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJASYA,E,uFAQZ,SAASC,EAAQC,GACb,OAAQA,EAAEC,MACN,KAAKH,EAAYI,UACb,OAYZ,SAAoBF,GAAa,IAAD,EACxBG,EAAE,UAAML,EAAYI,WACxB,KAAI,UAACF,EAAEI,gBAAH,aAAC,EAAYC,QACb,OAAO,KAMX,OAJAL,EAAEI,SAASE,SAAQ,SAAAC,GACfJ,GAAM,IAAMI,KAEhBJ,GAAM,KApBSK,CAAWR,GACtB,KAAKF,EAAYW,YACb,OAsBZ,SAAsBT,GAAa,IAAD,EAC1BG,EAAE,UAAML,EAAYW,aACxB,KAAI,UAACT,EAAEI,gBAAH,aAAC,EAAYC,QACb,OAAO,KAMX,OAJAL,EAAEI,SAASE,SAAQ,SAAAC,GACfJ,GAAM,IAAMI,KAEhBJ,GAAM,KA9BSO,CAAaV,GACxB,KAAKF,EAAYa,QACb,OAgCZ,SAAoBX,GAAa,IAAD,MACxBG,EAAE,UAAML,EAAYa,QAAlB,KACN,IAAKX,EAAEY,IACH,OAAO,KAGX,GADAT,GAAMH,EAAEY,IAAM,KACTZ,EAAEa,MACH,OAAO,KAMX,OAJAV,GAAMH,EAAEa,MAAQ,IAChBV,GAAE,oBAAIH,EAAEc,eAAN,aAAI,EAAWT,cAAf,QAAyB,EAC3BF,GAAM,KACNA,GAAE,UAAIH,EAAEc,eAAN,QAAiB,GA5CJC,CAAWf,GACtB,KAAKF,EAAYkB,SACb,OA8CZ,SAAoBhB,GAAa,IAAD,MACxBG,EAAE,UAAML,EAAYkB,SAAlB,KACN,IAAKhB,EAAEY,IACH,OAAO,KAGX,GADAT,GAAMH,EAAEY,IAAM,KACTZ,EAAEa,MACH,OAAO,KAMX,OAJAV,GAAMH,EAAEa,MAAQ,IAChBV,GAAE,oBAAIH,EAAEc,eAAN,aAAI,EAAWT,cAAf,QAAyB,EAC3BF,GAAM,KACNA,GAAE,UAAIH,EAAEc,eAAN,QAAiB,GA1DJG,CAAWjB,GACtB,KAAKF,EAAYoB,QACb,OA4DZ,SAAoBlB,GAAa,IAAD,IACxBG,EAAE,UAAML,EAAYoB,QAAlB,KACN,IAAKlB,EAAEmB,QACH,OAAO,KAMX,OAJAhB,GAAMH,EAAEmB,QAAU,IAClBhB,GAAE,oBAAIH,EAAEc,eAAN,aAAI,EAAWT,cAAf,QAAyB,EAC3BF,GAAM,KACNA,GAAMH,EAAEc,QApEOM,CAAWpB,K,SAnBlBF,K,gBAAAA,E,oBAAAA,E,cAAAA,E,eAAAA,E,eAAAA,M,iBCFG,SAASuB,EAAQC,GAC5B,IAAMC,EAAK,IAAIC,UAAUF,GACnBG,EAAY,IAAIC,SAAQ,SAAAC,GACtBJ,EAAGK,aAAeL,EAAGM,KACrBF,OAAQG,GAERP,EAAGQ,OAASJ,KAN4B,4CAUhD,WAAoB3B,GAApB,eAAAgC,EAAA,sEACUP,EADV,OAGe,QADLtB,EAAK8B,EAAcjC,KAErBuB,EAAGW,KAAK/B,GAJhB,4CAVgD,sBA4BhD,MAAO,CACH+B,KA7B4C,4CA8B5CC,wBAZJ,SAAiCC,GAC7Bb,EAAGc,iBAAiB,WAAW,SAACC,GAC5B,IAAMtC,EDyElB,SAAeuC,GACX,IAAMC,EAAQD,EAAaE,MAAM,MACjC,GAAID,EAAMnC,QAAU,EAChB,OAAO,KAEX,IACIqC,EADWF,EAAM,GACIC,MAAM,KACzBxC,EAAOyC,EAAY,GACnB1C,EAAa,CACfC,KAAMA,GAGV,OADAyC,EAAcA,EAAYC,MAAM,GACxB1C,GACJ,KAAKH,EAAYI,UAGjB,KAAKJ,EAAYW,YACbT,EAAEI,SAAWsC,EACb,MACJ,KAAK5C,EAAYa,QAIjB,KAAKb,EAAYkB,SACbhB,EAAEY,IAAM8B,EAAY,GACpB1C,EAAEa,MAAQ6B,EAAY,GACtB,MACJ,KAAK5C,EAAYoB,QACblB,EAAEmB,QAAUuB,EAAY,GAGhC,IAAM5B,EAAU0B,EAAMG,MAAM,GAAGC,KAAK,MAEpC,OADA5C,EAAEc,QAAUA,EACLd,EC1GWiC,CAAYK,EAAEO,MACd,OAAN7C,GAGJoC,EAAQpC,QCrBL,SAAS8C,EAAUxB,GAC9B,IAAMC,EAAKF,EAAQC,GACbyB,ECRK,SAAyBxB,GACpC,IAAMyB,EAA8D,GADrB,4CAiB/C,WAAuBpC,EAAaiC,GAApC,qBAAAb,EAAA,6DACUnB,EAAQoC,cACRC,EAAqB,CACvBjD,KAAMgC,EAAkBtB,QACxBC,MACAC,QACAC,QAASqC,KAAKC,UAAL,OAAeP,QAAf,IAAeA,IAAQ,KAE9BQ,EAAY,IAAI3B,SAAuB,SAAAC,GACzCqB,EAASnC,GAASc,KAEtBJ,EAAGW,KAAKgB,GAXZ,SAYsBG,EAZtB,WAYUC,EAZV,QAaaxC,QAbb,yCAce,MAdf,gCAgBWqC,KAAKI,MAAMD,EAAIxC,UAhB1B,6CAjB+C,sBAwC/C,OArCAS,EAAGY,yBAAwB,SAACnC,GACxB,GAAIA,EAAEC,OAASgC,EAAkBjB,UAG5BhB,EAAEa,MAAP,CAGA,IAAM2C,EAAWR,EAAShD,EAAEa,OACxB2C,IACAA,EAASxD,UACFgD,EAAShD,EAAEa,YA2BnB,CACH4C,QAzC2C,8CA0C3CC,MANJ,cD5BkBC,CAAgBpC,GAC5BqC,EEVK,SAA0BrC,GACrC,IAAMsC,EAA8C,GAmCpD,OAjCAtC,EAAGY,yBAAwB,SAACnC,GACxB,GAAIA,EAAEC,OAASgC,EAAkBf,SAG5BlB,EAAEmB,QAAP,CAGA,IAAMiB,EAAUyB,EAAK7D,EAAEmB,SACnBiB,GAAWpC,EAAEc,SACbsB,EAAQe,KAAKI,MAAMvD,EAAEc,cAwBtB,CACHgD,UArBJ,SAAmB3C,EAAiBiB,GAChCyB,EAAK1C,GAAWiB,EAChBb,EAAGW,KAAK,CACJjC,KAAMgC,EAAkB/B,UACxBE,SAAU,CAACe,MAkBf4C,YAdJ,SAAqB5C,GACjBI,EAAGW,KAAK,CACJjC,KAAMgC,EAAkBxB,YACxBL,SAAU,CAACe,YAER0C,EAAK1C,IAUZuC,MAPJ,cFtBmBM,CAAiBzC,GAOpC,MAAO,CACHkC,QAASV,EAAUU,QACnBK,UAAWF,EAAWE,UACtBJ,MARJ,WACIX,EAAUW,QACVE,EAAWF,U,2BGLnB,SAASO,EAAWC,GAClB,MAAM,iCAAN,OAAwCA,GAwC1C,SAASC,EAAT,GAAgD,IAA5BC,EAA2B,EAA3BA,SACZC,EAAiBC,iBAAuB,MAK9CC,qBAAU,YAJa,WAAO,IAAD,EAC3B,UAAAF,EAAeG,eAAf,SAAwBC,iBAIxBC,KACC,CAACN,IAUJ,OACE,sBAAKO,UAAU,WAAf,UACIP,EAASQ,KAAI,SAAAC,GACb,OACE,sBAAKF,UAAU,UAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBE,EAAQC,OAC/B,qBAAKH,UAAU,OAAf,UAfQ3E,EAe0B6E,EAd/BE,YAAyB,IAAIC,KAAQ,IAAIA,KAAKhF,EAAEiF,aACjD,EACHC,YAAO,IAAIF,KAAKhF,EAAEiF,WAAY,eAE9BC,YAAO,IAAIF,KAAKhF,EAAEiF,WAAY,gBAY/B,qBAAKN,UAAU,UAAf,SAA0BE,EAAQM,YALNN,EAAQO,IAZ3B,IAACpF,KAqBhB,qBAAKqF,IAAKhB,OAUhB,SAASiB,EAAT,GAA+C,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,SACpB,EAA8BC,mBAAiB,IAA/C,mBAAON,EAAP,KAAgBO,EAAhB,KACMC,EAAUC,uBAAY,SAACtD,GACb,UAAVA,EAAEuD,MAGNN,EAAI9B,QAAQQ,EAAW,OAAQ,CAC7BY,QAAS,CACPC,KAAMU,EACNL,aAGJO,EAAW,OACV,CAACP,EAASI,IAEPO,EAAWxB,iBAAyB,MAI1C,OAHAC,qBAAU,WAAO,IAAD,EACd,UAAAuB,EAAStB,eAAT,SAAkBuB,UACjB,IAED,uBACEV,IAAKS,EACLnB,UAAU,QACV1E,KAAK,OACL+F,MAAOb,EACPc,SAAU,SAAA3D,GAAC,OAAIoD,EAAWpD,EAAE4D,OAAOF,QACnCG,UAAWR,IASjB,SAASS,EAAT,GAAuD,IAAjCC,EAAgC,EAAhCA,YACpB,EAAkCZ,mBAAiB,IAAnD,mBAAOa,EAAP,KAAkBC,EAAlB,KACMZ,EAAUC,uBAAY,SAACtD,GACb,UAAVA,EAAEuD,KAGNQ,EAAYC,KACX,CAACD,EAAaC,IACjB,OACE,sBAAK3B,UAAU,cAAf,iCAEE,uBACEA,UAAU,aACV1E,KAAK,OACL+F,MAAOM,EACPL,SAAU,SAAA3D,GAAC,OAAIiE,EAAajE,EAAE4D,OAAOF,QACrCQ,WAAYb,OAMLc,MAvIf,WACE,MAAgChB,mBAAoB,IAApD,mBAAOrB,EAAP,KAAiBsC,EAAjB,KACMnB,EAAMoB,mBAAQ,WAClB,OAAO7D,EAAU,sEAChB,IAEHyB,qBAAU,WACRgB,EAAIzB,UAAU,iBAAiB,SAAAZ,GAC7BwD,GAAY,SAAAtC,GAAQ,4BAAQA,GAAR,CAAkBlB,UAExCqC,EAAI9B,QAAQQ,EAAW,OAAQ,MAAM2C,MAAK,SAAAtD,GACxCoD,EAAYpD,EAAIc,eAEjB,IAEH,MAAgCqB,mBAAiB,IAAjD,mBAAOD,EAAP,KAAiBa,EAAjB,KAEA,OACE,qBAAK1B,UAAU,MAAf,SACE,qBAAKA,UAAU,OAAf,SACiB,KAAba,EACA,cAACY,EAAD,CAAYC,YAAaA,IAEzB,qCACE,cAAClC,EAAD,CAAUC,SAAUA,IACpB,cAACkB,EAAD,CAAOC,IAAKA,EAAKC,SAAUA,YC3BxBqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBH,MAAK,YAAkD,IAA/CI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.32c8b04e.chunk.js","sourcesContent":["export interface Message {\n    type: MessageType;\n    subjects?: string[];\n    subject?: string;\n    uri?: string;\n    inbox?: string;\n    payload?: string;\n}\n\nexport enum MessageType {\n    Subscribe = \"SUB\",\n    Unsubscribe = \"UNSUB\",\n    Request = \"REQ\",\n    Response = \"RSP\",\n    Publish = \"PUB\"\n}\n\nfunction toProto(m: Message) {\n    switch (m.type) {\n        case MessageType.Subscribe:\n            return toProtoSub(m);\n        case MessageType.Unsubscribe:\n            return toProtoUnsub(m);\n        case MessageType.Request:\n            return toProtoReq(m);\n        case MessageType.Response:\n            return toProtoRsp(m);\n        case MessageType.Publish:\n            return toProtoPub(m);\n    }\n}\n\nfunction toProtoSub(m: Message) {\n    let mp = `${MessageType.Subscribe}`;\n    if (!m.subjects?.length) {\n        return null;\n    }\n    m.subjects.forEach(s => {\n        mp += \" \" + s;\n    });\n    mp += \"\\n\";\n    return mp;\n}\n\nfunction toProtoUnsub(m: Message) {\n    let mp = `${MessageType.Unsubscribe}`;\n    if (!m.subjects?.length) {\n        return null;\n    }\n    m.subjects.forEach(s => {\n        mp += ' ' + s;\n    });\n    mp += '\\n';\n    return mp;\n}\n\nfunction toProtoReq(m: Message) {\n    let mp = `${MessageType.Request} `\n    if (!m.uri) {\n        return null;\n    }\n    mp += m.uri + ' ';\n    if (!m.inbox) {\n        return null;\n    }\n    mp += m.inbox + ' ';\n    mp += m.payload?.length ?? 0;\n    mp += '\\n';\n    mp += m.payload ?? '';\n    return mp;\n}\n\nfunction toProtoRsp(m: Message) {\n    let mp = `${MessageType.Response} `;\n    if (!m.uri) {\n        return null;\n    }\n    mp += m.uri + ' ';\n    if (!m.inbox) {\n        return null;\n    }\n    mp += m.inbox + ' ';\n    mp += m.payload?.length ?? 0;\n    mp += '\\n';\n    mp += m.payload ?? '';\n    return mp;\n}\n\nfunction toProtoPub(m: Message) {\n    let mp = `${MessageType.Publish} `;\n    if (!m.subject) {\n        return null;\n    }\n    mp += m.subject + ' ';\n    mp += m.payload?.length ?? 0;\n    mp += '\\n';\n    mp += m.payload;\n    return mp;\n}\n\nfunction parse(protoMessage: string): (Message | null) {\n    const lines = protoMessage.split('\\n');\n    if (lines.length <= 1) {\n        return null;\n    }\n    const header = lines[0];\n    let headerParts = header.split(\" \");\n    const type = headerParts[0];\n    const m: Message = { \n        type: type as MessageType,\n    };\n    headerParts = headerParts.slice(1);\n    switch (type) {\n        case MessageType.Subscribe:\n            m.subjects = headerParts;\n            break;\n        case MessageType.Unsubscribe:\n            m.subjects = headerParts;\n            break;\n        case MessageType.Request:\n            m.uri = headerParts[0];\n            m.inbox = headerParts[1];\n            break;\n        case MessageType.Response:\n            m.uri = headerParts[0];\n            m.inbox = headerParts[1];\n            break;\n        case MessageType.Publish:\n            m.subject = headerParts[0];\n            break;\n    }\n    const payload = lines.slice(1).join('\\n');\n    m.payload = payload;\n    return m\n}\n\nexport {\n    toProto,\n    parse,\n}\n","import * as proto from './proto';\n\nexport interface WsApi {\n    send: (msg: proto.Message) => Promise<void>;\n    addMessageEventListener: (handler: (m: proto.Message) => void) => void;\n}\n\nexport default function connect(url: string): WsApi {\n    const ws = new WebSocket(url);\n    const openGuard = new Promise(resolve => {\n        if (ws.readyState === ws.OPEN) {\n            resolve(undefined);\n        } else {\n            ws.onopen = resolve;\n        }\n    })\n\n    async function send(m: proto.Message) {\n        await openGuard;\n        const mp = proto.toProto(m)\n        if (mp !== null) {\n            ws.send(mp);\n        }\n    }\n\n    function addMessageEventListener(handler: (m: proto.Message) => void) {\n        ws.addEventListener('message', (e: MessageEvent) => {\n            const m = proto.parse(e.data);\n            if (m === null) {\n                return;\n            }\n            handler(m);\n        });\n    }\n\n    return {\n        send,\n        addMessageEventListener,\n    };\n}\n","import createRequester from \"./requester\";\nimport createSubscriber from \"./subscriber\";\nimport connect from \"./ws\";\n\nexport interface ChatApi {\n    request: (uri: string, data: any) => Promise<any>;\n    subscribe: (subject: string, handler: (msg: any) => void) => void;\n    close: () => void;\n}\n\nexport default function createApi(url: string): ChatApi {\n    const ws = connect(url);\n    const requester = createRequester(ws);\n    const subscriber = createSubscriber(ws);\n\n    function close() {\n        requester.close();\n        subscriber.close();\n    }\n\n    return {\n        request: requester.request,\n        subscribe: subscriber.subscribe,\n        close,\n    }\n}\n","import * as proto from './proto';\nimport { v4 as uuid } from 'uuid';\nimport { WsApi } from './ws';\n\nexport default function createRequester(ws: WsApi) {\n    const requests: { [inbox: string]: (rsp: proto.Message) => void } = {};\n\n    ws.addMessageEventListener((m: proto.Message) => {\n        if (m.type !== proto.MessageType.Response) {\n            return;\n        }\n        if (!m.inbox) {\n            return;\n        }\n        const callback = requests[m.inbox];\n        if (callback) {\n            callback(m);\n            delete requests[m.inbox];\n        }\n    });\n\n    async function request(uri: string, data: any): Promise<any> {\n        const inbox = uuid();\n        const msg: proto.Message = {\n            type: proto.MessageType.Request,\n            uri,\n            inbox,\n            payload: JSON.stringify(data ?? {}),\n        };\n        const rspWaiter = new Promise<proto.Message>(resolve => {\n            requests[inbox] = resolve;\n        });\n        ws.send(msg);\n        const rsp = await rspWaiter;\n        if (!rsp.payload) {\n            return null;\n        }\n        return JSON.parse(rsp.payload);\n    }\n\n    function close() {\n        // TODO\n    }\n\n    return {\n        request,\n        close,\n    }\n}\n","import * as proto from './proto';\nimport { WsApi } from './ws';\n\nexport default function createSubscriber(ws: WsApi) {\n    const subs: { [key: string]: (msg: any) => void } = {};\n\n    ws.addMessageEventListener((m : proto.Message) => {\n        if (m.type !== proto.MessageType.Publish) {\n            return;\n        }\n        if (!m.subject) {\n            return;\n        }\n        const handler = subs[m.subject];\n        if (handler && m.payload) {\n            handler(JSON.parse(m.payload));\n        }\n    });\n\n    function subscribe(subject: string, handler: (msg: any) => void) {\n        subs[subject] = handler;\n        ws.send({\n            type: proto.MessageType.Subscribe,\n            subjects: [subject],\n        });\n    }\n\n    function unsubscribe(subject: string) {\n        ws.send({\n            type: proto.MessageType.Unsubscribe,\n            subjects: [subject],\n        });\n        delete subs[subject];\n    }\n\n    function close() {\n        // TODO\n    }\n\n    return {\n        subscribe,\n        unsubscribe,\n        close,\n    }\n}","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport './App.scss';\nimport createApi, { ChatApi } from './api';\nimport { format, differenceInCalendarDays } from 'date-fns';\n\ninterface Message {\n  id: string;\n  user: string;\n  content: string;\n  createdAt: string;\n}\n\nfunction requestUri(method: string) {\n  return `mantil-project-demo-chat-chat.${method}`;\n}\n\nfunction App() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const api = useMemo(() => {\n    return createApi('wss://uaejc9t3ga.execute-api.eu-central-1.amazonaws.com/$default');\n  }, []);\n\n  useEffect(() => {\n    api.subscribe('chat-messages', msg => {\n      setMessages(messages => [...messages, msg]);\n    });\n    api.request(requestUri('get'), null).then(rsp => {\n      setMessages(rsp.messages);\n    });\n  }, []);\n\n  const [username, setUsername] = useState<string>(\"\");\n\n  return (\n    <div className=\"App\">\n      <div className=\"chat\">\n        { username === \"\" ?\n          <UserPrompt setUsername={setUsername} />\n          :\n          <>\n            <Messages messages={messages} />\n            <Input api={api} username={username} />\n          </>\n        }\n      </div>\n    </div>\n  );\n}\n\ninterface MessagesProps {\n  messages: Message[];\n}\n\nfunction Messages({ messages }: MessagesProps) {\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView()\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages]);\n\n  const formatTime = (m: Message) => {\n    const diff = differenceInCalendarDays(new Date(), new Date(m.createdAt));\n    if (diff >= 1) {\n      return format(new Date(m.createdAt), 'M.d. H:m:ss');\n    } else {\n      return format(new Date(m.createdAt), 'H:m:ss');\n    }\n  }\n  return (\n    <div className=\"messages\">\n      { messages.map(message => {\n        return (\n          <div className=\"message\" key={message.id}>\n            <div className=\"info-row\">\n              <div className=\"user\">{message.user}</div>\n              <div className=\"time\">{formatTime(message)}</div>\n            </div>\n            <div className=\"content\">{message.content}</div>\n          </div>\n        );\n      })}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n}\n\ninterface InputProps {\n  api: ChatApi;\n  username: string;\n}\n\nfunction Input({ api, username }: InputProps) {\n  const [content, setContent] = useState<string>(\"\");\n  const onEnter = useCallback((e: any) => {\n    if (e.key !== 'Enter') {\n      return\n    }\n    api.request(requestUri('add'), {\n      message: {\n        user: username,\n        content,\n      },\n    });\n    setContent('');\n  }, [content, api]);\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n  return (\n    <input\n      ref={inputRef}\n      className=\"input\"\n      type=\"text\"\n      value={content}\n      onChange={e => setContent(e.target.value)}\n      onKeyDown={onEnter}\n    />\n  )\n}\n\ninterface UserPromptProps {\n  setUsername: (name: string) => void;\n}\n\nfunction UserPrompt({ setUsername }: UserPromptProps) {\n  const [userInput, setUserInput] = useState<string>(\"\");\n  const onEnter = useCallback((e: any) => {\n    if (e.key !== 'Enter') {\n      return\n    }\n    setUsername(userInput);\n  }, [setUsername, userInput]);\n  return (\n    <div className=\"user-prompt\">\n      Enter your username:\n      <input\n        className=\"user-input\"\n        type=\"text\"\n        value={userInput}\n        onChange={e => setUserInput(e.target.value)}\n        onKeyPress={onEnter}\n      />\n    </div>\n  )\n} \n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}