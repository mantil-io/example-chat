{"version":3,"sources":["api/proto.ts","logo.svg","api/ws.ts","api/index.ts","api/requester.ts","api/subscriber.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MessageType","toProto","m","type","Subscribe","mp","subjects","length","forEach","s","toProtoSub","Unsubscribe","toProtoUnsub","Request","uri","inbox","payload","toProtoReq","Response","toProtoRsp","Publish","subject","toProtoPub","connect","url","ws","WebSocket","openGuard","Promise","resolve","readyState","OPEN","undefined","onopen","a","proto","send","addMessageEventListener","handler","addEventListener","e","protoMessage","lines","split","headerParts","slice","join","data","createApi","requester","requests","uuid","msg","JSON","stringify","rspWaiter","rsp","parse","reqResolver","request","close","createRequester","subscriber","subs","subscribe","unsubscribe","createSubscriber","App","useEffect","api","console","log","then","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74626e22.chunk.js","sourcesContent":["export interface Message {\n    type: MessageType;\n    subjects?: string[];\n    subject?: string;\n    uri?: string;\n    inbox?: string;\n    payload?: string;\n}\n\nexport enum MessageType {\n    Subscribe = \"SUB\",\n    Unsubscribe = \"UNSUB\",\n    Request = \"REQ\",\n    Response = \"RSP\",\n    Publish = \"PUB\"\n}\n\nfunction toProto(m: Message) {\n    switch (m.type) {\n        case MessageType.Subscribe:\n            return toProtoSub(m);\n        case MessageType.Unsubscribe:\n            return toProtoUnsub(m);\n        case MessageType.Request:\n            return toProtoReq(m);\n        case MessageType.Response:\n            return toProtoRsp(m);\n        case MessageType.Publish:\n            return toProtoPub(m);\n    }\n}\n\nfunction toProtoSub(m: Message) {\n    let mp = `${MessageType.Subscribe}`;\n    if (!m.subjects?.length) {\n        return null;\n    }\n    m.subjects.forEach(s => {\n        mp += \" \" + s;\n    });\n    mp += \"\\n\";\n    return mp;\n}\n\nfunction toProtoUnsub(m: Message) {\n    let mp = `${MessageType.Unsubscribe}`;\n    if (!m.subjects?.length) {\n        return null;\n    }\n    m.subjects.forEach(s => {\n        mp += ' ' + s;\n    });\n    mp += '\\n';\n    return mp;\n}\n\nfunction toProtoReq(m: Message) {\n    let mp = `${MessageType.Request} `\n    if (!m.uri) {\n        return null;\n    }\n    mp += m.uri + ' ';\n    if (!m.inbox) {\n        return null;\n    }\n    mp += m.inbox + ' ';\n    mp += m.payload?.length ?? 0;\n    mp += '\\n';\n    mp += m.payload ?? '';\n    return mp;\n}\n\nfunction toProtoRsp(m: Message) {\n    let mp = `${MessageType.Response} `;\n    if (!m.uri) {\n        return null;\n    }\n    mp += m.uri + ' ';\n    if (!m.inbox) {\n        return null;\n    }\n    mp += m.inbox + ' ';\n    mp += m.payload?.length ?? 0;\n    mp += '\\n';\n    mp += m.payload ?? '';\n    return mp;\n}\n\nfunction toProtoPub(m: Message) {\n    let mp = `${MessageType.Publish} `;\n    if (!m.subject) {\n        return null;\n    }\n    mp += m.subject + ' ';\n    mp += m.payload?.length ?? 0;\n    mp += '\\n';\n    mp += m.payload;\n    return mp;\n}\n\nfunction parse(protoMessage: string): (Message | null) {\n    const lines = protoMessage.split('\\n');\n    if (lines.length <= 1) {\n        return null;\n    }\n    const header = lines[0];\n    let headerParts = header.split(\" \");\n    const type = headerParts[0];\n    const m: Message = { \n        type: type as MessageType,\n    };\n    headerParts = headerParts.slice(1);\n    switch (type) {\n        case MessageType.Subscribe:\n            m.subjects = headerParts;\n            break;\n        case MessageType.Unsubscribe:\n            m.subjects = headerParts;\n            break;\n        case MessageType.Request:\n            m.uri = headerParts[0];\n            m.inbox = headerParts[1];\n            break;\n        case MessageType.Response:\n            m.uri = headerParts[0];\n            m.inbox = headerParts[1];\n            break;\n        case MessageType.Publish:\n            m.subject = headerParts[0];\n            break;\n    }\n    const payload = lines.slice(1).join('\\n');\n    m.payload = payload;\n    return m\n}\n\nexport {\n    toProto,\n    parse,\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as proto from './proto';\n\nexport interface WsApi {\n    send: (msg: proto.Message) => Promise<void>;\n    addMessageEventListener: (handler: (m: proto.Message) => void) => void;\n}\n\nexport default function connect(url: string): WsApi {\n    const ws = new WebSocket(url);\n    const openGuard = new Promise(resolve => {\n        if (ws.readyState === ws.OPEN) {\n            resolve(undefined);\n        } else {\n            ws.onopen = resolve;\n        }\n    })\n\n    async function send(m: proto.Message) {\n        await openGuard;\n        const mp = proto.toProto(m)\n        if (mp !== null) {\n            ws.send(mp);\n        }\n    }\n\n    function addMessageEventListener(handler: (m: proto.Message) => void) {\n        ws.addEventListener('message', (e: MessageEvent) => {\n            const m = proto.parse(e.data);\n            if (m === null) {\n                return;\n            }\n            handler(m);\n        });\n    }\n\n    return {\n        send,\n        addMessageEventListener,\n    };\n}\n","import createRequester from \"./requester\";\nimport createSubscriber from \"./subscriber\";\nimport connect from \"./ws\";\n\nexport default function createApi(url: string) {\n    const ws = connect(url);\n    const requester = createRequester(ws);\n    const subscriber = createSubscriber(ws);\n\n    function close() {\n        requester.close();\n        subscriber.close();\n    }\n\n    return {\n        request: requester.request,\n        subscribe: subscriber.subscribe,\n        close,\n    }\n}\n","import * as proto from './proto';\nimport { v4 as uuid } from 'uuid';\nimport { WsApi } from './ws';\n\nexport default function createRequester(ws: WsApi) {\n    const requests: { [key: string]: (val: proto.Message) => void } = {};\n\n    ws.addMessageEventListener((m: proto.Message) => {\n        if (m.type !== proto.MessageType.Response) {\n            return;\n        }\n        if (!m.inbox) {\n            return;\n        }\n        const reqResolver = requests[m.inbox];\n        if (reqResolver) {\n            reqResolver(m);\n            delete requests[m.inbox];\n        }\n    });\n\n    async function request(uri: string, data: any): Promise<any> {\n        const inbox = uuid();\n        const msg: proto.Message = {\n            type: proto.MessageType.Request,\n            uri,\n            inbox,\n            payload: JSON.stringify(data),\n        };\n        const rspWaiter = new Promise<proto.Message>(resolve => {\n            requests[inbox] = resolve;\n        });\n        ws.send(msg);\n        const rsp = await rspWaiter;\n        if (!rsp.payload) {\n            return null;\n        }\n        return JSON.parse(rsp.payload);\n    }\n\n    function close() {\n        // TODO\n    }\n\n    return {\n        request,\n        close,\n    }\n}\n","import * as proto from './proto';\nimport { WsApi } from './ws';\n\nexport default function createSubscriber(ws: WsApi) {\n    const subs: { [key: string]: (msg: any) => void } = {};\n\n    ws.addMessageEventListener((m : proto.Message) => {\n        if (m.type !== proto.MessageType.Publish) {\n            return;\n        }\n        if (!m.subject) {\n            return;\n        }\n        const handler = subs[m.subject];\n        if (handler) {\n            handler(m);\n        }\n    });\n\n    function subscribe(subject: string, handler: (msg: any) => void) {\n        subs[subject] = handler;\n        ws.send({\n            type: proto.MessageType.Subscribe,\n            subjects: [subject],\n        });\n    }\n\n    function unsubscribe(subject: string) {\n        ws.send({\n            type: proto.MessageType.Unsubscribe,\n            subjects: [subject],\n        });\n        delete subs[subject];\n    }\n\n    function close() {\n        // TODO\n    }\n\n    return {\n        subscribe,\n        unsubscribe,\n        close,\n    }\n}","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport createApi from './api';\n\nfunction App() {\n  useEffect(() => {\n    const api = createApi('wss://uaejc9t3ga.execute-api.eu-central-1.amazonaws.com/$default');\n    api.subscribe('ping', msg => {\n      console.log(msg);\n    });\n    api.request('mantil-project-chat-ping', {}).then(rsp => {\n      console.log(rsp);\n    })\n  });\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}