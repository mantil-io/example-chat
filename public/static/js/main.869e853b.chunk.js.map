{"version":3,"sources":["App.tsx","index.tsx"],"names":["requestUri","method","Messages","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","scrollToBottom","className","map","message","user","m","differenceInCalendarDays","Date","createdAt","format","content","id","ref","Input","api","username","useState","setContent","sendMessage","useCallback","length","request","onEnter","e","key","inputRef","focus","type","placeholder","value","onChange","target","onKeyDown","classnames","disabled","onClick","UserPrompt","setUsername","userInput","setUserInput","onKeyPress","App","setMessages","useMemo","createWsApi","subscribe","msg","then","rsp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.869e853b.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport './App.scss';\nimport { createWsApi } from '@mantil-io/mantil.js';\nimport { WsApi } from '@mantil-io/mantil.js/dist/ws';\nimport { format, differenceInCalendarDays } from 'date-fns';\nimport classnames from 'classnames';\n\ninterface Message {\n  id: string;\n  user: string;\n  content: string;\n  createdAt: string;\n}\n\nfunction requestUri(method: string) {\n  return `chat.${method}`;\n}\n\nfunction App() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const api = useMemo(() => {\n    return createWsApi();\n  }, []);\n\n  useEffect(() => {\n    api.subscribe('chat-messages', msg => {\n      setMessages(messages => [...messages, msg]);\n    });\n    api.request(requestUri('get'), null).then(rsp => {\n      setMessages(rsp.messages);\n    });\n  }, []);\n\n  const [username, setUsername] = useState<string>(\"\");\n\n  return (\n    <div className=\"App\">\n      { username === \"\" ?\n        <UserPrompt setUsername={setUsername} />\n        :\n        <div className=\"chat\">\n          <Messages messages={messages} />\n          <Input api={api} username={username} />\n        </div>\n      }\n    </div>\n  );\n}\n\ninterface MessagesProps {\n  messages: Message[];\n}\n\nfunction Messages({ messages }: MessagesProps) {\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView()\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages]);\n\n  const formatTime = (m: Message) => {\n    const diff = differenceInCalendarDays(new Date(), new Date(m.createdAt));\n    if (diff >= 1) {\n      return format(new Date(m.createdAt), 'M.d. H:mm:ss');\n    } else {\n      return format(new Date(m.createdAt), 'H:mm:ss');\n    }\n  }\n  return (\n    <div className=\"messages\">\n      { messages.map(message => {\n        return (\n          <div className=\"message\" key={message.id}>\n            <div className=\"info-row\">\n              <div className=\"user\">{message.user}</div>\n              <div className=\"time\">{formatTime(message)}</div>\n            </div>\n            <div className=\"content\">{message.content}</div>\n          </div>\n        );\n      })}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n}\n\ninterface InputProps {\n  api: WsApi;\n  username: string;\n}\n\nfunction Input({ api, username }: InputProps) {\n  const [content, setContent] = useState<string>(\"\");\n\n  const sendMessage = useCallback(() => {\n    if (content.length === 0) {\n      return;\n    }\n    api.request(requestUri('add'), {\n      message: {\n        user: username,\n        content,\n      },\n    });\n    setContent('');\n  }, [api, username, content]);\n\n  const onEnter = useCallback((e: any) => {\n    if (e.key !== 'Enter') {\n      return\n    }\n    sendMessage();\n  }, [content, api]);\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n  return (\n    <div className=\"input-wrapper\">\n      <input\n        ref={inputRef}\n        className=\"input\"\n        type=\"text\"\n        placeholder=\"Type a message...\"\n        value={content}\n        onChange={e => setContent(e.target.value)}\n        onKeyDown={onEnter}\n      />\n      <i className={classnames('send-icon', 'fas', 'fa-paper-plane', {\n        disabled: content.length === 0,\n      })} onClick={sendMessage} />\n    </div>\n  )\n}\n\ninterface UserPromptProps {\n  setUsername: (name: string) => void;\n}\n\nfunction UserPrompt({ setUsername }: UserPromptProps) {\n  const [userInput, setUserInput] = useState<string>(\"\");\n  const onEnter = useCallback((e: any) => {\n    if (e.key !== 'Enter') {\n      return\n    }\n    setUsername(userInput);\n  }, [setUsername, userInput]);\n  return (\n    <div className=\"user-prompt\">\n      <input\n        className=\"user-input\"\n        type=\"text\"\n        placeholder=\"Choose your username...\"\n        value={userInput}\n        onChange={e => setUserInput(e.target.value)}\n        onKeyPress={onEnter}\n      />\n      <button className={classnames('enter-button', {\n        disabled: userInput.length === 0\n      })} onClick={() => setUsername(userInput)}>\n        Enter\n      </button>\n    </div>\n  )\n} \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}