{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["requestUri","method","Messages","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","scrollToBottom","className","map","message","user","m","differenceInCalendarDays","Date","createdAt","format","content","id","ref","Input","api","username","useState","setContent","onEnter","useCallback","e","key","request","inputRef","focus","type","value","onChange","target","onKeyDown","UserPrompt","setUsername","userInput","setUserInput","onKeyPress","App","setMessages","useMemo","createWsApi","subscribe","msg","then","rsp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc95924d.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport './App.scss';\nimport { createWsApi } from '@mantil-io/mantil.js';\nimport { WsApi } from '@mantil-io/mantil.js/dist/ws';\nimport { format, differenceInCalendarDays } from 'date-fns';\n\ninterface Message {\n  id: string;\n  user: string;\n  content: string;\n  createdAt: string;\n}\n\nfunction requestUri(method: string) {\n  return `chat.${method}`;\n}\n\nfunction App() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const api = useMemo(() => {\n    return createWsApi();\n  }, []);\n\n  useEffect(() => {\n    api.subscribe('chat-messages', msg => {\n      setMessages(messages => [...messages, msg]);\n    });\n    api.request(requestUri('get'), null).then(rsp => {\n      setMessages(rsp.messages);\n    });\n  }, []);\n\n  const [username, setUsername] = useState<string>(\"\");\n\n  return (\n    <div className=\"App\">\n      <div className=\"chat\">\n        { username === \"\" ?\n          <UserPrompt setUsername={setUsername} />\n          :\n          <>\n            <Messages messages={messages} />\n            <Input api={api} username={username} />\n          </>\n        }\n      </div>\n    </div>\n  );\n}\n\ninterface MessagesProps {\n  messages: Message[];\n}\n\nfunction Messages({ messages }: MessagesProps) {\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView()\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages]);\n\n  const formatTime = (m: Message) => {\n    const diff = differenceInCalendarDays(new Date(), new Date(m.createdAt));\n    if (diff >= 1) {\n      return format(new Date(m.createdAt), 'M.d. H:mm:ss');\n    } else {\n      return format(new Date(m.createdAt), 'H:mm:ss');\n    }\n  }\n  return (\n    <div className=\"messages\">\n      { messages.map(message => {\n        return (\n          <div className=\"message\" key={message.id}>\n            <div className=\"info-row\">\n              <div className=\"user\">{message.user}</div>\n              <div className=\"time\">{formatTime(message)}</div>\n            </div>\n            <div className=\"content\">{message.content}</div>\n          </div>\n        );\n      })}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n}\n\ninterface InputProps {\n  api: WsApi;\n  username: string;\n}\n\nfunction Input({ api, username }: InputProps) {\n  const [content, setContent] = useState<string>(\"\");\n  const onEnter = useCallback((e: any) => {\n    if (e.key !== 'Enter') {\n      return\n    }\n    api.request(requestUri('add'), {\n      message: {\n        user: username,\n        content,\n      },\n    });\n    setContent('');\n  }, [content, api]);\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n  return (\n    <input\n      ref={inputRef}\n      className=\"input\"\n      type=\"text\"\n      value={content}\n      onChange={e => setContent(e.target.value)}\n      onKeyDown={onEnter}\n    />\n  )\n}\n\ninterface UserPromptProps {\n  setUsername: (name: string) => void;\n}\n\nfunction UserPrompt({ setUsername }: UserPromptProps) {\n  const [userInput, setUserInput] = useState<string>(\"\");\n  const onEnter = useCallback((e: any) => {\n    if (e.key !== 'Enter') {\n      return\n    }\n    setUsername(userInput);\n  }, [setUsername, userInput]);\n  return (\n    <div className=\"user-prompt\">\n      Enter your username:\n      <input\n        className=\"user-input\"\n        type=\"text\"\n        value={userInput}\n        onChange={e => setUserInput(e.target.value)}\n        onKeyPress={onEnter}\n      />\n    </div>\n  )\n} \n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}